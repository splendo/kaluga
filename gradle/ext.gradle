println "tasks: $gradle.startParameter.taskNames"

// if the include is made from the example project shared module we need to go up a few directories
// and depending on when we are included, we can be in the `gradle` folder or not.
String path_prefix =
        file("componentskt.gradle.kts").exists() ? "" :
                file("gradle/componentskt.gradle.kts").exists() ? "gradle/" : "../../../gradle/"
def f2 = file("${path_prefix}gitBranch.gradle.kts")

apply from: f2.path

def props = new Properties()
def propFile = file("../local.properties")
if (propFile.exists()) {
    propFile.withInputStream { props.load(it) }
}

String libraryVersionLocalProperties = props["kaluga.libraryVersion"]
String exampleAsRootLocalProperties = props["kaluga.exampleAsRoot"]
String exampleMavenRepoLocalProperties = props["kaluga.exampleMavenRepo"]
String kotlinVersion = getProperty("kaluga.kotlinVersion")

// set some global variables
gradle.ext {
    kotlin_version = kotlinVersion
    kotlinx_coroutines_version = '1.6.0-native-mt'
    stately_version = '1.2.1'
    stately_isolate_version = '1.2.1'
    koin_version = '3.2.0-beta-1'
    serialization_version = '1.3.2'
    napier_version = '2.4.0'
    android_ble_scanner_version = '1.5.0'
    library_version_base = '0.3.0'
    library_version = libraryVersionLocalProperties ?: "$library_version_base${System.properties.kaluga_branch_postfix}"
    android_min_sdk_version = 21
    android_compile_sdk_version = 31
    android_target_sdk_version = 31
    android_build_tools_version = "31.0.0"

    play_services_version = "17.1.0"
    play_core_version = "1.10.0"
    play_core_ktx_version = "1.8.1"

    material_version = "1.4.0"

    androidx_appcompat_version = "1.3.1"
    androidx_fragment_version = "1.3.6"
    androidx_core_version = "1.6.0"
    androidx_lifecycle_version = "2.5.0-alpha04"
    androidx_lifecycle_viewmodel_compose_version = "1.0.0-alpha07"
    androidx_arch_core_testing_version = "2.1.0"
    androidx_browser_version = "1.3.0"
    androidx_constraint_layout_version = "2.0.4"

    androidx_compose_version = "1.2.0-alpha05"
    androidx_activity_compose_version = "1.3.0"
    androidx_navigation_compose_version = "2.4.0-alpha08"
    
    material_components_version = "1.4.0"
    material_components_adapter_version = "1.0.0"

    // sub packages of test have different versions, but alpha/beta/rc releases are harmonized
    androidx_test_version_postfix = ""
    androidx_test_version = "1.4.0$androidx_test_version_postfix"
    androidx_test_espresso_version = "3.3.0$androidx_test_version_postfix"
    androidx_test_junit_version = "1.1.2$androidx_test_version_postfix"

    // mockito and bytebuddy need to be upgraded in lockstep
    mockito_version = "3.11.2"
    bytebuddy_version = "1.11.3"

    // Javascript
    js_bigdecimal_version="1.0.26"

    // used/modified at runtime.
    component_type_default = "default"
    component_type_compose = "compose"
    component_type_app = "app"
    component_type_composeApp = "composeApp"
    component_type = component_type_default
}

if (System.env.containsKey("EXAMPLE_AS_ROOT")) {
    gradle.ext.example_as_root = Boolean.parseBoolean(System.env.EXAMPLE_AS_ROOT)
    logger.lifecycle "System env EXAMPLE_AS_ROOT set to $System.env.EXAMPLE_AS_ROOT, using $gradle.ext.example_as_root"
} else {
    // load some more from local.properties or set defaults.
    gradle.ext.example_as_root = exampleAsRootLocalProperties?.toBoolean() ?: false
    logger.lifecycle "local.properties read (kaluga.exampleAsRoot=$exampleAsRootLocalProperties, using $gradle.ext.example_as_root)"
}

if (System.env.containsKey("EXAMPLE_MAVEN_REPO")) {
    gradle.ext.example_maven_repo = System.env.EXAMPLE_MAVEN_REPO
    logger.lifecycle "System env EXAMPLE_MAVEN_REPO set to $System.env.EXAMPLE_MAVEN_REPO, using $gradle.ext.example_maven_repo"
} else {
    // load some more from local.properties or set defaults.
    if (exampleMavenRepoLocalProperties) {
        gradle.ext.example_maven_repo = exampleMavenRepoLocalProperties
        logger.lifecycle "local.properties read (kaluga.exampleMavenRepo=$exampleMavenRepoLocalProperties, using $gradle.ext.example_maven_repo)"
    } else {
        gradle.ext.example_maven_repo = "local"
        logger.lifecycle "local.properties not found, using default value ($gradle.ext.example_maven_repo)"
    }
}

// based on https://github.com/Kotlin/xcode-compat/blob/d677a43edc46c50888bca0a7890a81f976a42809/xcode-compat/src/main/kotlin/org/jetbrains/kotlin/xcodecompat/XcodeCompatPlugin.kt#L16
def sdkName = System.getenv("SDK_NAME") ?: "unknown"
gradle.ext.is_real_ios_device = sdkName.startsWith("iphoneos")
logger.lifecycle "Run on real ios device: $gradle.ext.is_real_ios_device from sdk: $sdkName"

// Run on IntelliJ
def ideaActive = System.getProperty("idea.active") == "true"
gradle.ext.idea_active = ideaActive
logger.lifecycle "Run on IntelliJ: $gradle.ext.idea_active"

// Run on apple silicon
def isAppleSilicon = System.getProperty("os.arch") == "aarch64"
gradle.ext.is_apple_silicon = isAppleSilicon
logger.lifecycle "Run on apple silicon: $gradle.ext.is_apple_silicon"

def iosX64 = "iosX64"
def iosArm64 = "iosArm64"
def iosSimulatorArm64 = "iosSimulatorArm64"
def allIosTargets = [iosX64, iosArm64, iosSimulatorArm64]
if (!gradle.ext.idea_active) {
    gradle.ext.ios_targets = allIosTargets
} else {
    if (gradle.ext.is_real_ios_device) {
        gradle.ext.ios_targets = [iosArm64]
    } else if (gradle.ext.is_apple_silicon) {
        gradle.ext.ios_targets = [iosSimulatorArm64]
    } else {
        gradle.ext.ios_targets = [iosX64]
    }
}
logger.lifecycle "Run on ios targets: $gradle.ext.ios_targets"
