repositories {
    google()
    mavenCentral()
}

// if the include is made from the example project shared module we need to go up one more directory
String path_prefix = file("../gradle/componentskt.gradle.kts").exists() ? ".." : "../.."

kotlin {

    targets {
        configure([]) {
            tasks.getByName(compilations.test.compileKotlinTaskName).kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }

    android("androidLib") {
        publishAllLibraryVariants()
    }

    gradle.ext.ios_targets.each {
        "$it" {
            binaries {
                // Use this entry point to turn the thread tests are run to a background thread instead of the main thread
                // This better allows testing the main dispatcher, and testing cross thread access
                binaries.getTest("DEBUG").freeCompilerArgs += ["-e", "com.splendo.kaluga.test.base.mainBackground"]
            }
        }
    }

    jvm()
    js(IR) {
        // Disable JS browser tests for now
        // See https://github.com/splendo/kaluga/issues/97
        // browser()
        nodejs()
        configure([compilations.main, compilations.test]) {
            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                metaInfo = true
                sourceMap = true
                moduleKind = 'umd'
            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${gradle.kotlinx_coroutines_version}!!"
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin("test-common")
                implementation kotlin("test-annotations-common")
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin("stdlib")
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-swing:$gradle.kotlinx_coroutines_version"
            }
        }

        jvmTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin("test")
                implementation kotlin("test-junit")
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$gradle.kotlinx_coroutines_version"
            }
        }

        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        iosMain {
            dependsOn(commonMain)
        }

        iosTest {
            dependsOn(commonTest)
        }

        gradle.ext.ios_targets.each {
            "${it}Main" {
                dependsOn(iosMain)
            }
            "${it}Test" {
                dependsOn(iosTest)
            }
        }

        sourceSets.all {
            languageSettings {
                optIn 'kotlinx.coroutines.DelicateCoroutinesApi'
                optIn 'kotlinx.coroutines.ExperimentalCoroutinesApi'
                optIn 'kotlinx.coroutines.ObsoleteCoroutinesApi'
                optIn 'kotlinx.coroutines.InternalCoroutinesApi'
                optIn 'kotlinx.coroutines.FlowPreview'
                optIn 'kotlin.ExperimentalUnsignedTypes'
                optIn 'kotlin.ExperimentalStdlibApi'
                optIn 'kotlin.time.ExperimentalTime'
                optIn 'kotlin.ExperimentalStdlibApi'
                enableLanguageFeature("InlineClasses")
            }
        }

        // Android dependencies must be declared below outside of the kotlin block

    }
}

apply from: "$path_prefix/gradle/android_common.gradle"

android {

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'
        exclude 'META-INF/shared_debug.kotlin_module'
        exclude 'META-INF/kotlinx-serialization-runtime.kotlin_module'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        // bytebuddy ðŸ¤¡
        exclude 'win32-x86-64/attach_hotspot_windows.dll'
        exclude 'win32-x86/attach_hotspot_windows.dll'
        //
        exclude 'META-INF/licenses/ASM'
    }
}

task printConfigurations {
    doLast {
        configurations.each { println it }
    }
}

afterEvaluate {
    gradle.ext.ios_targets.each { target ->
        if (tasks.getNames().contains("linkDebugTest${target.capitalize()}"))
            // creating copy iosTest resources task for the target
            tasks.create(name: "copy${target.capitalize()}TestResources", type: Copy) {
                from file('src/iosTest/resources/.')
                into file("$buildDir/bin/$target/debugTest")
            }
            // creating copy commonTest resources task for the target
            tasks.create(name: "copyCommonTest${target.capitalize()}TestResources", type: Copy) {
                from file('src/commonTest/resources/.')
                into file("$buildDir/bin/$target/debugTest")
            }
            // apply copy task to the target
            tasks.named("linkDebugTest${target.capitalize()}").configure {
                dependsOn("copy${target.capitalize()}TestResources")
                dependsOn("copyCommonTest${target.capitalize()}TestResources")
            }
    }
}

ktlint {
    disabledRules=["no-wildcard-imports","filename","import-ordering"]
}

apply from: "$path_prefix/gradle/componentskt.gradle.kts"
